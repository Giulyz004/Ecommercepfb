// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: G6LUa2CLhG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header2 from "../../Header2"; // plasmic-import: ymsmsqowiD_hX8/component
import Footer from "../../Footer"; // plasmic-import: GewF2Qmnx2xftX/component
import { useScreenVariants as useScreenVariantscf27W7HxUbhqT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -CF27w7hxUbhqT/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicProfilo.module.css"; // plasmic-import: G6LUa2CLhG/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 5mMk1vnowEUZeD/icon
import photo14387616810336461Ffad8D80JpgMvDs8LUPt from "./images/photo14387616810336461Ffad8D80Jpg.jpg"; // plasmic-import: MvDs8lUPt/picture

export const PlasmicProfilo__VariantProps = new Array();

export const PlasmicProfilo__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProfilo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox.textboxValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox2.textbox2Value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox3.textbox3Value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox4.textbox4Value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.textareaValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscf27W7HxUbhqT()
  });
  return (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2GyyV1uN4xbnqKtJ7pjrQU"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <React.Fragment>
        <div className={projectcss.plasmic_page_wrapper}>
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_library_plasmic_color_type_css.plasmic_tokens,
              sty.root
            )}
          >
            <Header2
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              className={classNames("__wab_instance", sty.header2)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__n8PD)}>
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: photo14387616810336461Ffad8D80JpgMvDs8LUPt,
                    fullWidth: 1000,
                    fullHeight: 667,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__wHtH)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ba90T)}
                >
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"PROFILO"}
                  </h2>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mjYH)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ljqx
                        )}
                      >
                        <input
                          data-plasmic-name={"textbox"}
                          data-plasmic-override={overrides.textbox}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.textbox
                          )}
                          onChange={e => {
                            p.generateStateOnChangeProp($state, [
                              "textbox",
                              "textboxValue"
                            ])(e.target.value);
                          }}
                          placeholder={"Nome"}
                          ref={ref => {
                            $refs["textbox"] = ref;
                          }}
                          size={1}
                          type={"text"}
                          value={p.generateStateValueProp($state, [
                            "textbox",
                            "textboxValue"
                          ])}
                        />

                        <input
                          data-plasmic-name={"textbox2"}
                          data-plasmic-override={overrides.textbox2}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.textbox2
                          )}
                          onChange={e => {
                            p.generateStateOnChangeProp($state, [
                              "textbox2",
                              "textbox2Value"
                            ])(e.target.value);
                          }}
                          placeholder={"Cognome"}
                          ref={ref => {
                            $refs["textbox2"] = ref;
                          }}
                          size={1}
                          type={"text"}
                          value={p.generateStateValueProp($state, [
                            "textbox2",
                            "textbox2Value"
                          ])}
                        />
                      </p.Stack>
                    ) : null}
                    <input
                      data-plasmic-name={"textbox3"}
                      data-plasmic-override={overrides.textbox3}
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textbox3
                      )}
                      onChange={e => {
                        p.generateStateOnChangeProp($state, [
                          "textbox3",
                          "textbox3Value"
                        ])(e.target.value);
                      }}
                      placeholder={"Email"}
                      ref={ref => {
                        $refs["textbox3"] = ref;
                      }}
                      size={1}
                      type={"text"}
                      value={p.generateStateValueProp($state, [
                        "textbox3",
                        "textbox3Value"
                      ])}
                    />

                    <input
                      data-plasmic-name={"textbox4"}
                      data-plasmic-override={overrides.textbox4}
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.textbox4
                      )}
                      onChange={e => {
                        p.generateStateOnChangeProp($state, [
                          "textbox4",
                          "textbox4Value"
                        ])(e.target.value);
                      }}
                      placeholder={"Numero di Telefono"}
                      ref={ref => {
                        $refs["textbox4"] = ref;
                      }}
                      size={1}
                      type={"text"}
                      value={p.generateStateValueProp($state, [
                        "textbox4",
                        "textbox4Value"
                      ])}
                    />

                    <textarea
                      data-plasmic-name={"textarea"}
                      data-plasmic-override={overrides.textarea}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea
                      )}
                      onChange={e => {
                        p.generateStateOnChangeProp($state, [
                          "textarea",
                          "textareaValue"
                        ])(e.target.value);
                      }}
                      placeholder={"Message"}
                      ref={ref => {
                        $refs["textarea"] = ref;
                      }}
                      value={p.generateStateValueProp($state, [
                        "textarea",
                        "textareaValue"
                      ])}
                    />

                    <p.Stack
                      as={"a"}
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__f1FKc)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Send"}
                      </div>
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__pwfYx)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </p.Stack>
              </div>
            </p.Stack>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </React.Fragment>
    </p.PlasmicPageGuard>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header2",
    "columns",
    "img",
    "h2",
    "textbox",
    "textbox2",
    "textbox3",
    "textbox4",
    "textarea",
    "link",
    "text",
    "footer"
  ],

  header2: ["header2"],
  columns: [
    "columns",
    "img",
    "h2",
    "textbox",
    "textbox2",
    "textbox3",
    "textbox4",
    "textarea",
    "link",
    "text"
  ],

  img: ["img"],
  h2: ["h2"],
  textbox: ["textbox"],
  textbox2: ["textbox2"],
  textbox3: ["textbox3"],
  textbox4: ["textbox4"],
  textarea: ["textarea"],
  link: ["link", "text"],
  text: ["text"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProfilo__ArgProps,
          internalVariantPropNames: PlasmicProfilo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProfilo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfilo";
  } else {
    func.displayName = `PlasmicProfilo.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilo = Object.assign(
  // Top-level PlasmicProfilo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header2: makeNodeComponent("header2"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    textbox: makeNodeComponent("textbox"),
    textbox2: makeNodeComponent("textbox2"),
    textbox3: makeNodeComponent("textbox3"),
    textbox4: makeNodeComponent("textbox4"),
    textarea: makeNodeComponent("textarea"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicProfilo
    internalVariantProps: PlasmicProfilo__VariantProps,
    internalArgProps: PlasmicProfilo__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Profilo",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfilo;
/* prettier-ignore-end */
